/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n
#define as(x) mt LS(x) x

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
          if-layers = <NAV_L NUM_L>;
          then-layer = <SYM_L>;
        };
    };

#define hold_tap_tap_dance_two_macros(labl, ht_labl, a1, a2, m1, m2) ht_labl: ht_labl {\
            compatible = "zmk,behavior-hold-tap";\
            label = #ht_labl;\
            #binding-cells = <2>;\
            flavor = "hold-preferred";\
            tapping-term-ms = <140>;\
            quick-tap-ms = <140>;\
            bindings = <m2>, <m1>;\
        };\
    labl: labl {\
            compatible = "zmk,behavior-tap-dance";\
            label = #labl;\
            #binding-cells = <0>;\
            tapping-term-ms = <140>;\
            bindings = <&mt a2 a1>, <&ht_labl 0 0>;\
        };


    behaviors {
        hold_tap_tap_dance_two_macros(td_parents, ht_td_parents, LS(N8), LS(N9), &parents_in, &parents_out)
        hold_tap_tap_dance_two_macros(td_quo, quotes_hold_tap, LS(N2), LS(NUHS), &d_quo, &s_quo)
        hold_tap_tap_dance_two_macros(td_brak, brackets_hold_tap, RA(N8), RA(N9), &brack_in, &brack_out)

        /* quotes_hold_tap: quotes_hold_tap { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     label = "QUOTES_HOLD_TAP"; */
        /*     #binding-cells = <2>; */
        /*     flavor = "hold-preferred"; */
        /*     tapping-term-ms = <140>; */
        /*     quick-tap-ms = <140>; */
        /*     /\* bindings = <&d_quo>, <&s_quo>; *\/ */
        /*     bindings = <&s_quo>, <&d_quo>; */
        /* }; */
        /* td_quo: tap_dance_quotes { */
        /*     compatible = "zmk,behavior-tap-dance"; */
        /*     label = "TAP_DANCE_QUOTES"; */
        /*     #binding-cells = <0>; */
        /*     tapping-term-ms = <140>; */
        /*     bindings = <&mt LS(NUHS) LS(N2)>, <&quotes_hold_tap 0 0>; */
        /* }; */
        /* brackets_hold_tap: brackets_hold_tap { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     label = "BRACKETS_HOLD_TAP"; */
        /*     #binding-cells = <2>; */
        /*     flavor = "hold-preferred"; */
        /*     tapping-term-ms = <140>; */
        /*     quick-tap-ms = <140>; */
        /*     /\* bindings = <&d_quo>, <&s_quo>; *\/ */
        /*     bindings = <&brack_out>, <&brack_in>; */
        /* }; */
        /* td_brak: tap_dance_brackets { */
        /*     compatible = "zmk,behavior-tap-dance"; */
        /*     label = "TAP_DANCE_QUOTES"; */
        /*     #binding-cells = <0>; */
        /*     tapping-term-ms = <140>; */
        /*     bindings = <&mt RA(N9) RA(N8)>, <&brackets_hold_tap 0 0>; */
        /* }; */
    };

#define two_macros(l1, l2, s1, s2) l1: l1 {\
label = #l1;\
 compatible =  "zmk,behavior-macro";\
            #binding-cells = <0>;\
            wait-ms =<40>;\
            tap-ms =<40>;\
            bindings = s1;\
 };\
l2: l2 {\
label = #l2;\
 compatible =  "zmk,behavior-macro";\
            #binding-cells = <0>;\
            wait-ms =<40>;\
            tap-ms =<40>;\
            bindings = s2;\
 };

    macros {
        two_macros(parents_in, parents_out, <&kp LS(N8) &kp LS(N9) &kp LEFT>, <&kp LS(N8) &kp LS(N9)>)
        two_macros(d_quo, s_quo, <&kp LS(N2) &kp LS(N2) &kp LEFT>, <&kp LS(NUHS) &kp LS(NUHS) &kp LEFT>)
        two_macros(brack_in, brack_out, <&kp RA(N8) &kp RA(N9) &kp LEFT>, <&kp RA(N8) &kp RA(N9)>)
        /* d_quo: d_quo { */
        /*     label = "ZM_d_quo"; */
        /*     compatible = "zmk,behavior-macro"; */
        /*     #binding-cells = <0>; */
        /*     wait-ms =<40>; */
        /*     tap-ms =<40>; */
        /*     bindings */
        /*         = <&kp LS(N2) &kp LS(N2) &kp LEFT>; */
        /* }; */
        /* s_quo: s_quo { */
        /*     label = "ZM_s_quo"; */
        /*     compatible = "zmk,behavior-macro"; */
        /*     #binding-cells = <0>; */
        /*     wait-ms =<40>; */
        /*     tap-ms =<40>; */
        /*     bindings */
        /*         = <&kp LS(NUHS) &kp LS(NUHS) &kp LEFT>; */
        /* }; */
        /* brack_in: brackets_going_in { */
        /*     label = "BRACKETS-GOING_IN"; */
        /*     compatible = "zmk,behavior-macro"; */
        /*     #binding-cells = <0>; */
        /*     wait-ms =<40>; */
        /*     tap-ms =<40>; */
        /*     bindings */
        /*         = <&kp RA(N8) &kp RA(N9) &kp LEFT>; */
        /* }; */
        /* brack_out: brackets_staying_out { */
        /*     label = "BRACKETS_STAYING_OUT"; */
        /*     compatible = "zmk,behavior-macro"; */
        /*     #binding-cells = <0>; */
        /*     wait-ms =<40>; */
        /*     tap-ms =<40>; */
        /*     bindings */
        /*         = <&kp RA(N8) &kp RA(N9)>; */
        /* }; */
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                &kp BSPC   &as(K)      &as(DOT)    &as(O)       &as(COMMA)       &as(Z)          &as(V)            &as(G)          &as(C)       &as(L)      &as(MINUS)  &as(Y)
                &kp TAB    &as(H)      &as(A)      &as(E)       &as(I)           &as(U)          &as(D)            &as(T)          &as(R)       &as(N)      &as(S)      &as(F)
                &kp LCTRL  &as(X)      &as(Q)      &as(SQT)     &as(LBKT)        &as(SEMI)       &as(B)            &as(P)          &as(W)       &as(M)      &as(J)      &as(T)
                                       &kp LGUI    &kp LGUI     &kp LC(LA(LGUI)) &lt NAV_L SPACE &lt NUM_L RET     &kp LC(LALT)    &kp LALT     &kp LALT
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &kp LC(BSPC) &kp RA(Q)  &kp EQUAL  &td_quo     &mt LS(MINUS) LS(N1)  &kp NUHS       &kp RBKT     &kp N7         &kp N8      &kp N9     &as(NUBS)     &bootloader
                &trans       &kp RA(NUBS)     &td_brak     &parents_in      &parents_out                &td_parents       &trans     &kp LARW       &kp DARW    &kp UARW   &kp RARW   &trans
                &bt BT(0)    &bt BT(1)  &bt BT(2)  &bt BT(3)   &bt BT(4)             &trans       &trans     &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
                                        &trans     &trans      &trans                &trans       &trans    &trans  &trans         &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp LBKT   &kp N7     &kp N8      &kp N9    &kp RBKT    &kp C_PREV    &trans         &trans       &trans       &trans     &trans
&trans     &kp SEMI   &kp N4     &kp N5      &kp N6    &kp EQUAL   &kp C_NEXT    &trans         &trans       &trans       &trans     &trans
&trans     &kp GRAVE  &kp N1     &kp N2      &kp N3    &kp BSLH    &trans        &trans         &trans       &trans       &trans     &trans
                     &trans     &kp N0      &kp MINUS    &none         &none     &kp ESC        &kp DEL      &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans     &kp LBRC   &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp RBRC     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp COLON  &kp LS(N4) &kp LS(N5)  &kp LS(N6)   &kp PLUS     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp TILDE  &kp LS(N1) &kp LS(N2)  &kp LS(N3)   &kp LS(BSLH) &trans     &trans    &trans       &trans       &trans     &trans
                      &trans     &kp LS(N0)      &trans          &trans       &trans    &trans  &trans         &trans
            >;
        };

    };
};

