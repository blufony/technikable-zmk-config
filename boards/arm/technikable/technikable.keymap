/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n
#undef TBLE_MIT
#undef TBLE_DUAL_2U

#define as(X) ht_hp LS(X) X

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NAV_L NUM_L>;
	    then-layer = <SYM_L>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                &kp BKSP   &kp K      &kp DOT    &kp O       &kp COMMA       &kp Z          &kp V            &kp G          &kp C       &kp L      &kp MINUS  &kp Y
                &kp TAB    &kp H      &kp A      &kp E       &kp I           &kp U          &kp D            &kp T          &kp R       &kp N      &kp S      &kp F
                &kp LCTRL  &kp X      &kp Q      &kp SQT     &kp LBRKT       &kp SEMI       &kp B            &kp P          &kp W       &kp M      &kp J      &kp T
#ifdef TBLE_DUAL_2U
                       &kp D  &kp 2      &kp U                &lt NUM_L SPACE              &kp RALT    &kp RCTRL
#elif defined(TBLE_MIT)
                       &kp M  &kp I    &kp T          &kp SPACE                   &mo NUM_L      &kp RALT    &kp RCTRL
#else
                                       &kp LGUI    &kp LGUI     &kp LC(LA(LGUI)) &lt NAV_L SPACE &lt NUM_L RET     &kp LC(LALT)    &kp LALT     &kp LALT
#endif
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &kp DEL
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &kp LARW       &kp DARW    &kp UARW   &kp RARW   &trans
&bt BT(0)  &bt BT(1)  &bt BT(2) &bt BT(3)    &bt BT(4)       &trans       &trans     &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
                      &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp LBKT   &kp N7     &kp N8      &kp N9    &kp RBKT    &kp C_PREV    &trans         &trans       &trans       &trans     &trans
&trans     &kp SEMI   &kp N4     &kp N5      &kp N6    &kp EQUAL   &kp C_NEXT    &trans         &trans       &trans       &trans     &trans
&trans     &kp GRAVE  &kp N1     &kp N2      &kp N3    &kp BSLH    &trans        &trans         &trans       &trans       &trans     &trans
                     &trans     &kp N0      &kp MINUS    &none         &none     &kp ESC        &kp DEL      &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans     &kp LBRC   &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp RBRC     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp COLON  &kp LS(N4) &kp LS(N5)  &kp LS(N6)   &kp PLUS     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp TILDE  &kp LS(N1) &kp LS(N2)  &kp LS(N3)   &kp LS(BSLH) &trans     &trans    &trans       &trans       &trans     &trans
                      &trans     &kp LS(N0)      &trans          &trans       &trans    &trans  &trans         &trans
            >;
        };

    };
};

